#+title: DOOM Emacs Configuration
#+author: evf
#+property: header-args:emacs-lisp :tangle yes :comments link
#+property: header-args :tangle no :results silent :eval no-export

This is my first attempt on an Emacs literate configuration, mostly based on [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur's config]].


* Basic configuration


** Lexical binding

[[https://nullprogram.com/blog/2016/12/22/][More info]].

#+begin_src emacs-lisp :comments no
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src


** User info

#+begin_src emacs-lisp
(setq user-full-name "evf"
      user-mail-address "eliseuv816@gmail.com")
#+end_src


** Better defaults

#+begin_src emacs-lisp
(setq-default
 ;; delete-by-moving-to-trash t                      ; Delete files to trash
 window-combination-resize t                      ; Take new window space from all other windows (not just current)
 x-stretch-cursor t)                              ; Stretch cursor to the glyph width

(setq undo-limit 80000000                         ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                       ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                         ; Nobody likes to loose work, I certainly don't
      truncate-string-ellipsis "…"                ; Unicode ellispis are nicer than "...", and also save /precious/ space
      password-cache-expiry nil                   ; I can trust my computers ... can't I?
      ;; scroll-preserve-screen-position 'always     ; Don't have `point' jump around
      scroll-margin 1)                            ; It's nice to maintain a little margin

(global-subword-mode t)                           ; Recognize uppercase letters as word boundaries (useful for CamelCase naming)
#+end_src

Make popups open on the right:

#+begin_src emacs-lisp
(set-popup-rule!
  '(("^ \\*" :size 0.3 :slot -1 :side 'right)
    ("^\\*" :select t :side 'right)
    ("^\\*\\(?:scratch\\|Messages\\)" :ttl t)
    ("^\\*Help" :slot -1 :size 0.2 :select t)
    ("^\\*doom:" :size 0.35 :select t :modeline t :quit t :ttl t :side 'right)))
#+end_src


*** Auto customization

Add modifications made using the customization to a separate =custom.el= file and load it if it exists.

#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name "custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src


*** Windows

Enable vertical and horizontal splitting:

#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src

Ask which buffer (with preview) to open when the new window is created form the split:

#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (consult-buffer))
#+end_src


*** Default buffer

Use =org-mode= as default major mode in new buffers:

#+begin_src emacs-lisp
(setq-default major-mode 'org-mode)
#+end_src


* DOOM configuration


** Modules
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

Each DOOM module install the necessary packages and apply some basic configuration.

These modules are sorted in categories.

#+name: init.el
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :comments no
;;; init.el -*- lexical-binding: t; -*-

(doom!  :input
        <<doom-input>>

        :completion
        <<doom-completion>>

        :ui
        <<doom-ui>>

        :editor
        <<doom-editor>>

        :emacs
        <<doom-emacs>>

        :term
        <<doom-term>>

        :checkers
        <<doom-checkers>>

        :tools
        <<doom-tools>>

        :os
        <<doom-os>>

        :lang
        <<doom-lang>>

        :email
        <<doom-email>>

        :app
        <<doom-app>>

        :config
        <<doom-config>>
       )
#+end_src


*** Input

#+name: doom-input
#+begin_src emacs-lisp
;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
;;chinese
;;japanese
;;layout            ; auie,ctsrnm is the superior home row
#+end_src


*** Completion

#+name: doom-completion
#+begin_src emacs-lisp
company           ; the ultimate code completion backend
;;helm              ; the *other* search engine for love and life
;;ido               ; the other *other* search engine...
;;ivy               ; a search engine for love and life
(vertico +icons +childframe)    ; the search engine of the future
#+end_src


*** UI

#+name: doom-ui
#+begin_src emacs-lisp
;;deft              ; notational velocity for Emacs
doom              ; what makes DOOM look the way it does
doom-dashboard    ; a nifty splash screen for Emacs
doom-quit         ; DOOM quit-message prompts when you quit Emacs
;;(emoji +unicode)  ; 🙂
hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
;;hydra
;;indent-guides     ; highlighted indent columns
(ligatures +fira +extra)        ; ligatures and symbols to make your code pretty again
;;minimap           ; show a map of the code on the side
modeline          ; snazzy, Atom-inspired modeline, plus API
;;nav-flash         ; blink cursor line after big motions
;;neotree           ; a project drawer, like NERDTree for vim
ophints           ; highlight the region an operation acts on
(popup +defaults +all)   ; tame sudden yet inevitable temporary windows
;;tabs              ; a tab bar for Emacs
(treemacs +lsp)          ; a project drawer, like neotree but cooler
unicode           ; extended unicode support for various languages
(vc-gutter +diff-hl +pretty)         ; vcs diff in the fringe
vi-tilde-fringe   ; fringe tildes to mark beyond EOB
(window-select +numbers)     ; visually switch windows
workspaces        ; tab emulation, persistence & separate workspaces
;;zen               ; distraction-free coding or writing
#+end_src


*** Editor

#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere); come to the dark side, we have cookies
file-templates    ; auto-snippets for empty files
fold              ; (nigh) universal code folding
(format +onsave)  ; automated prettiness
;;god               ; run Emacs commands without modifier keys
;;lispy             ; vim for lisp, for people who don't like vim
multiple-cursors  ; editing in many places at once
;;objed             ; text object editing for the innocent
;;parinfer          ; turn lisp into python, sort of
rotate-text       ; cycle region at point between text candidates
snippets          ; my elves. They type so I don't have to
;;word-wrap         ; soft wrapping with language-aware indent
#+end_src


*** Emacs

#+name: doom-emacs
#+begin_src emacs-lisp
(dired +icons)            ; making dired pretty [functional]
electric          ; smarter, keyword-based electric-indent
(ibuffer +icons)         ; interactive buffer management
(undo +tree)              ; persistent, smarter undo for your inevitable mistakes
vc                ; version-control and Emacs, sitting in a tree
#+end_src


*** Terminal

#+name: doom-term
#+begin_src emacs-lisp
;;eshell            ; the elisp shell that works everywhere
;;shell             ; simple shell REPL for Emacs
;;term              ; basic terminal emulator for Emacs
vterm             ; the best terminal emulation in Emacs
#+end_src


*** Checkers

#+name: doom-checkers
#+begin_src emacs-lisp
syntax              ; tasing you for every semicolon you forget
(spell +aspell +flyspell +everywhere) ; tasing you for misspelling mispelling
grammar           ; tasing grammar mistake every you make
#+end_src


*** Tools

#+name: doom-tools
#+begin_src emacs-lisp
;;ansible
biblio              ; Writes a PhD for you (citation needed)
;;debugger          ; FIXME stepping through code, to help you add bugs
;;direnv
;;docker
;;editorconfig      ; let someone else argue about tabs vs spaces
ein               ; tame Jupyter notebooks with emacs
(eval +overlay)     ; run code, run (also, repls)
;;gist              ; interacting with github gists
(lookup             ; navigate your code and its documentation
 +dictionary)       ; dictionary/thesaurus is nice
(lsp +peek)         ; M-x vscode
magit             ; a git porcelain for Emacs
make              ; run make tasks from Emacs
(pass +auth)        ; password manager for nerds
pdf               ; pdf enhancements
;;prodigy           ; FIXME managing external services & code builders
rgb                 ; creating color strings
;;taskrunner        ; taskrunner for all your projects
;;terraform         ; infrastructure as code
;;tmux              ; an API for interacting with tmux
tree-sitter         ; syntax and parsing, sitting in a tree...
upload              ; map local to remote projects via ssh/ftp
#+end_src


*** OS

#+name: doom-os
#+begin_src emacs-lisp
(:if IS-MAC macos)  ; improve compatibility with macOS
;;tty               ; improve the terminal Emacs experience
#+end_src


*** Languages

#+name: doom-lang
#+begin_src emacs-lisp
;;agda              ; types of types of types of types...
(beancount +lsp)         ; mind the GAAP
(cc +lsp +tree-sitter)           ; C > C++ == 1
;;clojure           ; java with a lisp
;;common-lisp       ; if you've seen one lisp, you've seen them all
;;coq               ; proofs-as-programs
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
data              ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;dhall
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp        ; drown in parentheses
;;erlang            ; an elegant language for a more civilized age
ess               ; emacs speaks statistics
;;factor
;;faust             ; dsp, but you get to keep your soul
(fortran +lsp)      ; in FORTRAN, GOD is REAL (unless declared INTEGER)
;;fsharp            ; ML stands for Microsoft's Language
;;fstar             ; (dependent) types and (monadic) effects and Z3
;;gdscript          ; the language you waited for
;;(go +lsp)         ; the hipster dialect
;;(graphql +lsp)    ; Give queries a REST
(haskell +lsp)  ; a language that's lazier than I am
;;hy                ; readability of scheme w/ speed of python
;;idris             ; a language you can depend on
(json +lsp +tree-sitter)              ; At least it ain't XML
;;(java +lsp)       ; the poster child for carpal tunnel syndrome
;;javascript        ; all(hope(abandon(ye(who(enter(here))))))
(julia +lsp +tree-sitter)             ; a better, faster MATLAB
;;kotlin            ; a better, slicker Java(Script)
(latex +cdlatex +fold +latexmk +lsp)             ; writing papers in Emacs has never been so fun
;;lean              ; for folks with too much to prove
ledger            ; be audit you can be
;;lua               ; one-based indices? one-based indices
markdown          ; writing docs for people to ignore
;;nim               ; python + lisp at the speed of c
;;nix               ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org                    ; organize your plain life in plain text
 ;;+brain               ; org-brain integration
 ;;+contacts            ; org-contacts integration
 +dragndrop             ; drag & drop files/images into org buffers
 +gnuplot               ; who doesn't like pretty pictures
 ;;+hugo                ; use Emacs for hugo blogging
 ;;+journal             ; org-journal integration
 +jupyter               ; ipython/jupyter support for babel
 +noter                 ; enhanced PDF notetaking
 +pandoc                ; export-with-pandoc support
 ;;+passwords           ; org-passwords integration
 ;;+pomodoro            ; be fruitful with the tomato technique
 +present               ; using org-mode for presentations
 +pretty                ; pretty unicode symbols, better syntax highlighting for LaTeX
 +roam2)                ; wander around notes
;;php               ; perl's insecure younger brother
;;plantuml          ; diagrams for confusing people more
;;purescript        ; javascript, but functional
(python +conda +lsp +pyright +tree-sitter)            ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;(racket +lsp +xp)            ; a DSL for DSLs
;;raku              ; the artist formerly known as perl6
;;rest              ; Emacs as a REST client
;;rst               ; ReST in peace
;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
(rust +lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;(scheme +guile)   ; a fully conniving family of lisps
(sh +lsp +tree-sitter)                ; she sells {ba,z,fi}sh shells on the C xor
;;sml
;;solidity          ; do you need a blockchain? No.
;;swift             ; who asked for emoji variables?
;;terra             ; Earth and Moon in alignment for performance.
;;web               ; the tubes
(yaml +lsp)              ; JSON, but readable
;;zig               ; C, but simpler
#+end_src


*** Email

#+name: doom-email
#+begin_src emacs-lisp
;;(mu4e +org +gmail)
;;notmuch
;;(wanderlust +gmail)
#+end_src


*** Applications

#+name: doom-app
#+begin_src emacs-lisp
;;calendar
;;emms
;;everywhere        ; *leave* Emacs!? You must be joking
;;irc               ; how neckbeards socialize
(rss +org)          ; emacs as an RSS reader
;;twitter           ; twitter client https://twitter.com/vnought
#+end_src


*** Config

Enable literate configuration file and DOOM defaults.

#+name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings +smartparens)
#+end_src


** Visual settings


*** Fonts

Select fonts:

#+begin_src emacs-lisp
 (setq doom-font (font-spec :family "FiraCode Nerd Font" :size 12)
      doom-big-font (font-spec :family "FiraCode Nerd Font" :size 24)
      doom-variable-pitch-font (font-spec :family "Alegreya" :size 13)
      ;doom-unicode-font (font-spec :family "JuliaMono")
      doom-serif (font-spec :family "IBM Plex Mono" :weight 'light))
#+end_src

Detect missing fonts:

#+name: detect-missing-fonts
#+begin_src emacs-lisp :tangle no
(defvar required-fonts '("FiraCode Nerd Font" "Symbola" "Alegreya" "IBM Plex Mono"))

(defvar available-fonts
  (delete-dups (or (font-family-list)
                   (split-string (shell-command-to-string "fc-list : family")
                                 "[,\n]"))))

(defvar missing-fonts
  (delq nil (mapcar
             (lambda (font)
               (unless (delq nil (mapcar (lambda (f)
                                           (string-match-p (format "^%s$" font) f))
                                         available-fonts))
                 font))
             required-fonts)))

(if missing-fonts
    (pp-to-string
     `(unless noninteractive
        (add-hook! 'doom-init-ui-hook
          (run-at-time nil nil
                       (lambda ()
                         (message "%s missing the following fonts: %s"
                                  (propertize "Warning!" 'face '(bold warning))
                                  (mapconcat (lambda (font)
                                               (propertize font 'face 'font-lock-variable-name-face))
                                             ',missing-fonts
                                             ", "))
                         (sleep-for 0.5))))))
  ";; No missing fonts detected")
#+end_src

#+begin_src emacs-lisp :noweb no-export
<<detect-missing-fonts()>>
#+end_src

Change certain keywords to symbols, such as lambda (\lambda):

#+begin_src emacs-lisp
(setq global-prettify-symbols-mode t)
#+end_src


*** Theme

My favorite themes:

#+begin_src emacs-lisp
;;(setq doom-theme 'doom-vibrant)
;;(setq doom-theme 'doom-dracula)
;;(setq doom-theme 'doom-outrun-electric)
(setq doom-theme 'doom-tokyo-night)
#+end_src

Allow bold and italic text:

#+begin_src emacs-lisp
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
#+end_src


*** Modeline

Hide encoding if it is the default =LF UTF-8=:

#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
  (setq-local doom-modeline-buffer-encoding
              (unless (and (memq (plist-get (coding-system-plist buffer-file-coding-system) :category)
                                 '(coding-category-undecided coding-category-utf-8))
                           (not (memq (coding-system-eol-type buffer-file-coding-system) '(1 2))))
                t)))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src


*** Line numbers

If set to ~t~, line numbers are enabled.
If set to ~nil~, line numbers are disabled.
For relative line numbers, set this to ~relative~.

#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src


*** Default buffer names

#+begin_src emacs-lisp
(setq doom-fallback-buffer-name "► Doom"
      +doom-dashboard-name "► Doom")
#+end_src


** Set info directories

Info files:

#+begin_src emacs-lisp
(add-to-list 'Info-directory-list "~/.config/doom/info")
#+end_src


** Allow babel execution in CLI actions

The file =$DOOMDIR/cli.el= is sourced every time a =DOOM Emacs= command line command is run.
Here we can enable =Org Babel= evaluation.

#+begin_src emacs-lisp :tangle cli.el :comments no
;;; cli.el -*- lexical-binding: t; -*-
(setq org-confirm-babel-evaluate nil)

(defun doom-shut-up-a (orig-fn &rest args)
  (quiet! (apply orig-fn args)))

(advice-add 'org-babel-execute-src-block :around #'doom-shut-up-a)
#+end_src


* Packages
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:

Packages are installed using the ~package!~ macro in =packages.el=, then running ~doom refresh~ on the command line.

This file shouldn't be byte compiled.
#+begin_src emacs-lisp :tangle "packages.el" :comments no
;; -*- no-byte-compile: t; -*-
#+end_src


** Convenience


*** Which key

Make the =which-key= popup appear faster.

#+begin_src emacs-lisp
(setq which-key-idle-delay 0.5)
#+end_src

Remove the redundant =evil-= in front of the commands.

#+begin_src emacs-lisp
(setq which-key-allow-multiple-replacements t)
(after! which-key
  (pushnew!
   which-key-replacement-alist
   '(("" . "\\`+?evil[-:]?\\(?:a-\\)?\\(.*\\)") . (nil . "◂\\1"))
   '(("\\`g s" . "\\`evilem--?motion-\\(.*\\)") . (nil . "◃\\1"))
   ))
#+end_src


** Tools


*** EVIL

#+begin_quote
From the =:editor evil= module.
#+end_quote

Some better defaults:

#+begin_src emacs-lisp
(after! evil
  (setq evil-ex-substitute-global t     ; I like my s/../.. to by global by default
        evil-move-cursor-back nil       ; Don't move the block cursor when toggling insert mode
        evil-kill-on-visual-paste nil)) ; Don't put overwritten text in the kill ring
#+end_src

Prevent the installation of the package the escape EVIL mode:

#+begin_src emacs-lisp :tangle packages.el
(package! evil-escape :disable t)
#+end_src


*** Company

#+begin_quote
From the =:completion company= module.
#+end_quote

Make completions appear faster and more often:

#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay 0.5
        company-minimum-prefix-length 2)
  (setq company-show-numbers t)
  (add-hook 'evil-normal-state-entry-hook #'company-abort)) ;; make aborting less annoying.
#+end_src

Remember more from history:

#+begin_src emacs-lisp
(setq-default history-length 1000)
(setq-default prescient-history-length 1000)
#+end_src


*** Projectile

#+begin_quote
From the =:core packages= module.
#+end_quote

Prevent projectile from adding directories simply by looking at documentation:

#+begin_src emacs-lisp
(setq projectile-ignored-projects '("~/" "/tmp" "~/.config/emacs-doom/.local/straight/repos/"))
(defun projectile-ignored-project-function (filepath)
  "Return t if FILEPATH is within any of `projectile-ignored-projects'"
  (or (mapcar (lambda (p) (s-starts-with-p p filepath)) projectile-ignored-projects)))
#+end_src

Where to look for projects:

#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/programs"))
#+end_src


*** YASnippet

#+begin_quote
From the =:editor snippets= module.
#+end_quote

Nested snippets are good, so let's enable that.

#+begin_src emacs-lisp
(setq yas-triggers-in-field t)
#+end_src


*** LSP

#+begin_src emacs-lisp
(require 'lsp-mode)
(setq lsp-eldoc-enable-hover 't
      lsp-eldoc-render-all 't
      lsp-ui-doc-mode 't
      lsp-ui-doc-enable 't
      lsp-ui-doc-delay 0.2
      lsp-ui-doc-use-webkit 't
      lsp-ui-doc-include-signature 't
      lsp-ui-doc-header 't
      lsp-ui-doc-include-signature 't
      lsp-log-io 't
      lsp-ui-sideline-mode 't
      lsp-ui-imenu-buffer-mode 't
      lsp-ui-imenu-enable 't)
#+end_src


*** Flycheck

#+begin_src emacs-lisp
(setq flycheck-check-syntax-automatically '(save idle-change new-line mode-enabled)
      flycheck-idle-change-delay 0.2)
#+end_src


*** vterm

Make open on the right:

#+begin_src emacs-lisp
(after! vterm
  (set-popup-rule! "*doom:vterm-popup:main" :size 0.3 :vslot -4 :select t :quit nil :ttl 0 :side 'right))
#+end_src



** Visuals


*** Info colors

This makes manual pages nicer to look at:

#+begin_src emacs-lisp :tangle packages.el
(package! info-colors :pin "47ee73cc19b1049eef32c9f3e264ea7ef2aaf8a5")
#+end_src

To use this we'll just hook it into =Info=.

#+begin_src emacs-lisp
(use-package! info-colors
  :commands (info-colors-fontify-node))

(add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src


*** Treemacs

#+begin_quote
From the =:ui treemacs= module.
#+end_quote

Hide files with a given extension from treemacs:

#+begin_src emacs-lisp
(after! treemacs
  (defvar treemacs-file-ignore-extensions '()
    "File extension which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-globs '()
    "Globs which will are transformed to `treemacs-file-ignore-regexps' which `treemacs-ignore-filter' will ensure are ignored")
  (defvar treemacs-file-ignore-regexps '()
    "RegExps to be tested to ignore files, generated from `treeemacs-file-ignore-globs'")
  (defun treemacs-file-ignore-generate-regexps ()
    "Generate `treemacs-file-ignore-regexps' from `treemacs-file-ignore-globs'"
    (setq treemacs-file-ignore-regexps (mapcar 'dired-glob-regexp treemacs-file-ignore-globs)))
  (if (equal treemacs-file-ignore-globs '()) nil (treemacs-file-ignore-generate-regexps))
  (defun treemacs-ignore-filter (file full-path)
    "Ignore files specified by `treemacs-file-ignore-extensions', and `treemacs-file-ignore-regexps'"
    (or (member (file-name-extension file) treemacs-file-ignore-extensions)
        (let ((ignore-file nil))
          (dolist (regexp treemacs-file-ignore-regexps ignore-file)
            (setq ignore-file (or ignore-file (if (string-match-p regexp full-path) t nil)))))))
  (add-to-list 'treemacs-ignored-file-predicates #'treemacs-ignore-filter))
#+end_src

Extensions to be ignored:

#+begin_src emacs-lisp
(setq treemacs-file-ignore-extensions
      '(;; LaTeX
        "aux"
        "ptc"
        "fdb_latexmk"
        "fls"
        "synctex.gz"
        "toc"
        ;; LaTeX - glossary
        "glg"
        "glo"
        "gls"
        "glsdefs"
        "ist"
        "acn"
        "acr"
        "alg"
        ;; LaTeX - pgfplots
        "mw"
        ;; LaTeX - pdfx
        "pdfa.xmpi"
        ))
(setq treemacs-file-ignore-globs
      '(;; LaTeX
        "*/_minted-*"
        ;; AucTeX
        "*/.auctex-auto"
        "*/_region_.log"
        "*/_region_.tex"))
#+end_src


** File types


*** Systemd

For editing systemd unit files:

#+begin_src emacs-lisp :tangle packages.el
(package! systemd :pin "b6ae63a236605b1c5e1069f7d3afe06ae32a7bae")
#+end_src

#+begin_src emacs-lisp
(use-package! systemd
  :defer t)
#+end_src


* Applications


** Newsfeed

#+begin_quote
From the =:app rss= module.
#+end_quote

Use =elfeed= to read RSS feeds.


*** Keybindings

#+begin_src emacs-lisp
(map! :map elfeed-search-mode-map
      :after elfeed-search
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :n "q" #'+rss/quit
      :n "e" #'elfeed-update
      :n "r" #'elfeed-search-untag-all-unread
      :n "u" #'elfeed-search-tag-all-unread
      :n "s" #'elfeed-search-live-filter
      :n "RET" #'elfeed-search-show-entry
      :n "p" #'elfeed-show-pdf
      :n "+" #'elfeed-search-tag-all
      :n "-" #'elfeed-search-untag-all
      :n "S" #'elfeed-search-set-filter
      :n "b" #'elfeed-search-browse-url
      :n "y" #'elfeed-search-yank)
(map! :map elfeed-show-mode-map
      :after elfeed-show
      [remap kill-this-buffer] "q"
      [remap kill-buffer] "q"
      :n doom-leader-key nil
      :nm "q" #'+rss/delete-pane
      :nm "o" #'ace-link-elfeed
      :nm "RET" #'org-ref-elfeed-add
      :nm "n" #'elfeed-show-next
      :nm "N" #'elfeed-show-prev
      :nm "p" #'elfeed-show-pdf
      :nm "+" #'elfeed-show-tag
      :nm "-" #'elfeed-show-untag
      :nm "s" #'elfeed-show-new-live-search
      :nm "y" #'elfeed-show-yank)
#+end_src


*** Usability enhancements

#+begin_src emacs-lisp
(after! elfeed-search
  (set-evil-initial-state! 'elfeed-search-mode 'normal))
(after! elfeed-show-mode
  (set-evil-initial-state! 'elfeed-show-mode   'normal))

(after! evil-snipe
  (push 'elfeed-show-mode   evil-snipe-disabled-modes)
  (push 'elfeed-search-mode evil-snipe-disabled-modes))
#+end_src


*** Visual enhancements

#+begin_src emacs-lisp
(after! elfeed

  (elfeed-org)
  (use-package! elfeed-link)

  (setq elfeed-search-filter "@1-week-ago +unread"
        elfeed-search-print-entry-function '+rss/elfeed-search-print-entry
        elfeed-search-title-min-width 80
        elfeed-show-entry-switch #'pop-to-buffer
        elfeed-show-entry-delete #'+rss/delete-pane
        elfeed-show-refresh-function #'+rss/elfeed-show-refresh--better-style
        shr-max-image-proportion 0.6)

  (add-hook! 'elfeed-show-mode-hook (hide-mode-line-mode 1))
  (add-hook! 'elfeed-search-update-hook #'hide-mode-line-mode)

  (defface elfeed-show-title-face '((t (:weight ultrabold :slant italic :height 1.5)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (defface elfeed-show-author-face `((t (:weight light)))
    "title face in elfeed show buffer"
    :group 'elfeed)
  (set-face-attribute 'elfeed-search-title-face nil
                      :foreground 'nil
                      :weight 'light)

  (defadvice! +rss-elfeed-wrap-h-nicer ()
    "Enhances an elfeed entry's readability by wrapping it to a width of
`fill-column' and centering it with `visual-fill-column-mode'."
    :override #'+rss-elfeed-wrap-h
    (setq-local truncate-lines nil
                shr-width 120
                visual-fill-column-center-text t
                default-text-properties '(line-height 1.1))
    (let ((inhibit-read-only t)
          (inhibit-modification-hooks t))
      (visual-fill-column-mode)
      ;; (setq-local shr-current-font '(:family "Merriweather" :height 1.2))
      (set-buffer-modified-p nil)))

  (defun +rss/elfeed-search-print-entry (entry)
    "Print ENTRY to the buffer."
    (let* ((elfeed-goodies/tag-column-width 40)
           (elfeed-goodies/feed-source-column-width 30)
           (title (or (elfeed-meta entry :title) (elfeed-entry-title entry) ""))
           (title-faces (elfeed-search--faces (elfeed-entry-tags entry)))
           (feed (elfeed-entry-feed entry))
           (feed-title
            (when feed
              (or (elfeed-meta feed :title) (elfeed-feed-title feed))))
           (tags (mapcar #'symbol-name (elfeed-entry-tags entry)))
           (tags-str (concat (mapconcat 'identity tags ",")))
           (title-width (- (window-width) elfeed-goodies/feed-source-column-width
                           elfeed-goodies/tag-column-width 4))

           (tag-column (elfeed-format-column
                        tags-str (elfeed-clamp (length tags-str)
                                               elfeed-goodies/tag-column-width
                                               elfeed-goodies/tag-column-width)
                        :left))
           (feed-column (elfeed-format-column
                         feed-title (elfeed-clamp elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width
                                                  elfeed-goodies/feed-source-column-width)
                         :left)))

      (insert (propertize feed-column 'face 'elfeed-search-feed-face) " ")
      (insert (propertize tag-column 'face 'elfeed-search-tag-face) " ")
      (insert (propertize title 'face title-faces 'kbd-help title))
      (setq-local line-spacing 0.2)))

  (defun +rss/elfeed-show-refresh--better-style ()
    "Update the buffer to match the selected entry, using a mail-style."
    (interactive)
    (let* ((inhibit-read-only t)
           (title (elfeed-entry-title elfeed-show-entry))
           (date (seconds-to-time (elfeed-entry-date elfeed-show-entry)))
           (author (elfeed-meta elfeed-show-entry :author))
           (link (elfeed-entry-link elfeed-show-entry))
           (tags (elfeed-entry-tags elfeed-show-entry))
           (tagsstr (mapconcat #'symbol-name tags ", "))
           (nicedate (format-time-string "%a, %e %b %Y %T %Z" date))
           (content (elfeed-deref (elfeed-entry-content elfeed-show-entry)))
           (type (elfeed-entry-content-type elfeed-show-entry))
           (feed (elfeed-entry-feed elfeed-show-entry))
           (feed-title (elfeed-feed-title feed))
           (base (and feed (elfeed-compute-base (elfeed-feed-url feed)))))
      (erase-buffer)
      (insert "\n")
      (insert (format "%s\n\n" (propertize title 'face 'elfeed-show-title-face)))
      (insert (format "%s\t" (propertize feed-title 'face 'elfeed-search-feed-face)))
      (when (and author elfeed-show-entry-author)
        (insert (format "%s\n" (propertize author 'face 'elfeed-show-author-face))))
      (insert (format "%s\n\n" (propertize nicedate 'face 'elfeed-log-date-face)))
      (when tags
        (insert (format "%s\n"
                        (propertize tagsstr 'face 'elfeed-search-tag-face))))
      ;; (insert (propertize "Link: " 'face 'message-header-name))
      ;; (elfeed-insert-link link link)
      ;; (insert "\n")
      (cl-loop for enclosure in (elfeed-entry-enclosures elfeed-show-entry)
               do (insert (propertize "Enclosure: " 'face 'message-header-name))
               do (elfeed-insert-link (car enclosure))
               do (insert "\n"))
      (insert "\n")
      (if content
          (if (eq type 'html)
              (elfeed-insert-html content base)
            (insert content))
        (insert (propertize "(empty)\n" 'face 'italic)))
      (goto-char (point-min))))

  )
#+end_src


*** Functionality enhancements

#+begin_src emacs-lisp
(after! elfeed-show
  (require 'url)

  (defvar elfeed-pdf-dir
    (expand-file-name "pdfs/"
                      (file-name-directory (directory-file-name elfeed-enclosure-default-dir))))

  (defvar elfeed-link-pdfs
    '(("https://www.jstatsoft.org/index.php/jss/article/view/v0\\([^/]+\\)" . "https://www.jstatsoft.org/index.php/jss/article/view/v0\\1/v\\1.pdf")
      ("http://arxiv.org/abs/\\([^/]+\\)" . "https://arxiv.org/pdf/\\1.pdf"))
    "List of alists of the form (REGEX-FOR-LINK . FORM-FOR-PDF)")

  (defun elfeed-show-pdf (entry)
    (interactive
     (list (or elfeed-show-entry (elfeed-search-selected :ignore-region))))
    (let ((link (elfeed-entry-link entry))
          (feed-name (plist-get (elfeed-feed-meta (elfeed-entry-feed entry)) :title))
          (title (elfeed-entry-title entry))
          (file-view-function
           (lambda (f)
             (when elfeed-show-entry
               (elfeed-kill-buffer))
             (pop-to-buffer (find-file-noselect f))))
          pdf)

      (let ((file (expand-file-name
                   (concat (subst-char-in-string ?/ ?, title) ".pdf")
                   (expand-file-name (subst-char-in-string ?/ ?, feed-name)
                                     elfeed-pdf-dir))))
        (if (file-exists-p file)
            (funcall file-view-function file)
          (dolist (link-pdf elfeed-link-pdfs)
            (when (and (string-match-p (car link-pdf) link)
                       (not pdf))
              (setq pdf (replace-regexp-in-string (car link-pdf) (cdr link-pdf) link))))
          (if (not pdf)
              (message "No associated PDF for entry")
            (message "Fetching %s" pdf)
            (unless (file-exists-p (file-name-directory file))
              (make-directory (file-name-directory file) t))
            (url-copy-file pdf file)
            (funcall file-view-function file))))))

  )
#+end_src


* Languages


** Org-mode
:PROPERTIES:
:CUSTOM_ID: org
:END:

#+begin_src emacs-lisp :tangle packages.el
(unpin! org) ; there be bugs
(package! org-contrib
  :recipe (:host nil :repo "https://git.sr.ht/~bzg/org-contrib"
           :files ("lisp/*.el"))
  :pin "c6aef31ccfc7c4418c3b51e98f7c3bd8e255f5e6")
#+end_src

Location of files:

#+begin_src emacs-lisp
(setq org-directory "~/Documents/org/"
      org-agenda-files '("~/Documents/org/")
      org-capture-journal-file "~/Documents/org/journal.org"
      org-use-property-inheritance t       ; It's convenient to have properties inherited.
      org-log-done 'time                   ; Having the time a item is done sounds convenient.
      org-catch-invisible-edits 'smart     ; Try not to accidently do weird stuff in invisible regions.
      org-hide-emphasis-markers t)
#+end_src

#+begin_src emacs-lisp
;;(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
;; Default folding
(setq org-startup-folded 'content)
#+end_src


*** Extra functionality


**** Julia Support

Org Babel Julia:

#+begin_src emacs-lisp :tangle packages.el
(package! ob-julia :recipe (:local-repo "lisp/ob-julia" :files ("*.el" "julia")))
#+end_src

#+begin_src emacs-lisp
(use-package! ob-julia
  :commands org-babel-execute:julia
  :config
  (setq org-babel-julia-command-arguments
        `("--sysimage"
          ,(when-let ((img "~/.julia/config/sysimages/revise-omr_sysimage.so")
                      (exists? (file-exists-p img)))
             (expand-file-name img))
          "--threads"
          ,(number-to-string (- (doom-system-cpus) 2))
          "--banner=no")))
#+end_src


**** LaTeX Support

$\LaTeX$ classes:

#+begin_src emacs-lisp
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
             '("note"
               "\\documentclass{article}[a4]
                \\usepackage[margin=0.5in]{geometry}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src


Default $\LaTeX$ packages.

#+begin_src emacs-lisp
(setq org-latex-packages-alist '(
                                 ;; AMS packages
                                 ("" "amsmath" t)
                                 ("" "amsthm" t)
                                 ("" "amssymb" t)
                                 ;; Extended math
                                 ("" "mathtools" t)
                                 ;; Dirac braket notation
                                 ("" "braket" t)
                                 ;; Color names
                                 ("dvipsnames" "xcolor" t)
                                 ;; Cancel terms
                                 ("" "cancel" t)))
#+end_src

Default bibliography file:

#+begin_src emacs-lisp
(setq reftex-default-bibliography
      '("~/Storage/Zotero/my_library.bib"))
#+end_src


**** Org-Cite

Use =Zotero= library:

#+begin_src emacs-lisp
(after! citar
  (setq citar-bibliography '("~/Storage/Zotero/my_library.bib")
        org-cite-global-bibliography '("~/Storage/Zotero/my_library.bib"))
  (setq citar-symbols
        `((file ,(all-the-icons-faicon "file-o" :face 'all-the-icons-green :v-adjust -0.1) . " ")
          (note ,(all-the-icons-material "speaker_notes" :face 'all-the-icons-blue :v-adjust -0.3) . " ")
          (link ,(all-the-icons-octicon "link" :face 'all-the-icons-orange :v-adjust 0.01) . " "))))
#+end_src

Import CSL citation styles and bibliography from =Zotero=:

#+begin_src emacs-lisp
(after! oc-csl
  (setq org-cite-csl-styles-dir "~/Storage/Zotero/styles"
        org-cite-csl--fallback-style-file "~/Storage/Zotero/styles/american-physics-society.csl"))
#+end_src

Citation command under Org's localleader:

#+begin_src emacs-lisp
(map! :after org
      :map org-mode-map
      :localleader
      :desc "Insert citation" "@" #'org-cite-insert)
#+end_src

Function that attempts to convert =org-ref= citations to =org-cite= forms:

#+begin_src emacs-lisp
(after! oc
  (defun org-ref-to-org-cite ()
    "Attempt to convert org-ref citations to org-cite syntax."
    (interactive)
    (let* ((cite-conversions '(("cite" . "//b") ("Cite" . "//bc")
                               ("nocite" . "/n")
                               ("citep" . "") ("citep*" . "//f")
                               ("parencite" . "") ("Parencite" . "//c")
                               ("citeauthor" . "/a/f") ("citeauthor*" . "/a")
                               ("citeyear" . "/na/b")
                               ("Citep" . "//c") ("Citealp" . "//bc")
                               ("Citeauthor" . "/a/cf") ("Citeauthor*" . "/a/c")
                               ("autocite" . "") ("Autocite" . "//c")
                               ("notecite" . "/l/b") ("Notecite" . "/l/bc")
                               ("pnotecite" . "/l") ("Pnotecite" . "/l/bc")))
           (cite-regexp (rx (regexp (regexp-opt (mapcar #'car cite-conversions) t))
                            ":" (group (+ (not (any "\n 	,.)]}")))))))
      (save-excursion
        (goto-char (point-min))
        (while (re-search-forward cite-regexp nil t)
          (message (format "[cite%s:@%s]"
                                 (cdr (assoc (match-string 1) cite-conversions))
                                 (match-string 2)))
          (replace-match (format "[cite%s:@%s]"
                                 (cdr (assoc (match-string 1) cite-conversions))
                                 (match-string 2))))))))
#+end_src


**** LSP support in ~src~ blocks

Now, by default, =LSP=s don't really function at all in ~src~ blocks.

#+begin_src emacs-lisp
(cl-defmacro lsp-org-babel-enable (lang)
  "Support LANG in org source code block."
  (setq centaur-lsp 'lsp-mode)
  (cl-check-type lang stringp)
  (let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
         (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
    `(progn
       (defun ,intern-pre (info)
         (let ((file-name (->> info caddr (alist-get :file))))
           (unless file-name
             (setq file-name (make-temp-file "babel-lsp-")))
           (setq buffer-file-name file-name)
           (lsp-deferred)))
       (put ',intern-pre 'function-documentation
            (format "Enable lsp-mode in the buffer of org source block (%s)."
                    (upcase ,lang)))
       (if (fboundp ',edit-pre)
           (advice-add ',edit-pre :after ',intern-pre)
         (progn
           (defun ,edit-pre (info)
             (,intern-pre info))
           (put ',edit-pre 'function-documentation
                (format "Prepare local buffer environment for org source block (%s)."
                        (upcase ,lang))))))))
(defvar org-babel-lang-list
  '("julia" "python" "ipython" "bash" "sh"))
(dolist (lang org-babel-lang-list)
  (eval `(lsp-org-babel-enable ,lang)))
#+end_src


*** Visuals


**** Org Modern

#+begin_src emacs-lisp :tangle packages.el
(package! org-modern :pin "537e6b75e38bc0eff083c390c257098c9fc9ab49")
#+end_src

...with a touch of configuration...

#+begin_src emacs-lisp :tangle no
(use-package! org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq org-modern-star '("◉" "○" "✸" "✿" "✤" "✜" "◆" "▶")
        org-modern-table-vertical 1
        org-modern-table-horizontal 0.2
        org-modern-list '((43 . "➤")
                          (45 . "–")
                          (42 . "•"))
        org-modern-todo-faces
        '(("TODO" :inverse-video t :inherit org-todo)
          ("PROJ" :inverse-video t :inherit +org-todo-project)
          ("STRT" :inverse-video t :inherit +org-todo-active)
          ("[-]"  :inverse-video t :inherit +org-todo-active)
          ("HOLD" :inverse-video t :inherit +org-todo-onhold)
          ("WAIT" :inverse-video t :inherit +org-todo-onhold)
          ("[?]"  :inverse-video t :inherit +org-todo-onhold)
          ("KILL" :inverse-video t :inherit +org-todo-cancel)
          ("NO"   :inverse-video t :inherit +org-todo-cancel))
        org-modern-footnote
        (cons nil (cadr org-script-display))
        org-modern-block-fringe nil
        org-modern-block-name
        '((t . t)
          ("src" "»" "«")
          ("example" "»–" "–«")
          ("quote" "❝" "❞")
          ("export" "⏩" "⏪"))
        org-modern-progress nil
        org-modern-priority nil
        org-modern-horizontal-rule (make-string 36 ?─)
        org-modern-keyword
        '((t . t)
          ("title" . "𝙏")
          ("subtitle" . "𝙩")
          ("author" . "𝘼")
          ("email" . #("" 0 1 (display (raise -0.14))))
          ("date" . "𝘿")
          ("property" . "☸")
          ("options" . "⌥")
          ("startup" . "⏻")
          ("macro" . "𝓜")
          ("bind" . #("" 0 1 (display (raise -0.1))))
          ("bibliography" . "")
          ("print_bibliography" . #("" 0 1 (display (raise -0.1))))
          ("cite_export" . "⮭")
          ("print_glossary" . #("ᴬᶻ" 0 1 (display (raise -0.1))))
          ("glossary_sources" . #("" 0 1 (display (raise -0.14))))
          ("include" . "⇤")
          ("setupfile" . "⇚")
          ("html_head" . "🅷")
          ("html" . "🅗")
          ("latex_class" . "🄻")
          ("latex_class_options" . #("🄻" 1 2 (display (raise -0.14))))
          ("latex_header" . "🅻")
          ("latex_header_extra" . "🅻⁺")
          ("latex" . "🅛")
          ("beamer_theme" . "🄱")
          ("beamer_color_theme" . #("🄱" 1 2 (display (raise -0.12))))
          ("beamer_font_theme" . "🄱𝐀")
          ("beamer_header" . "🅱")
          ("beamer" . "🅑")
          ("attr_latex" . "🄛")
          ("attr_html" . "🄗")
          ("attr_org" . "⒪")
          ("call" . #("" 0 1 (display (raise -0.15))))
          ("name" . "⁍")
          ("header" . "›")
          ("caption" . "☰")
          ("RESULTS" . "🠶")))
  (custom-set-faces! '(org-modern-statistics :inherit org-checkbox-statistics-todo)))
#+end_src

Since =org-modern='s tag face supplants Org's tag face, we need to adjust the
spell-check face ignore list

#+begin_src emacs-lisp
(after! spell-fu
  (cl-pushnew 'org-modern-tag (alist-get 'org-mode +spell-excluded-faces-alist)))
#+end_src


**** Symbols

It's also nice to change the character used for collapsed items (by default ~…~),
I think ~▾~ is better for indicating 'collapsed section'.
and add an extra ~org-bullet~ to the default list of four.

#+begin_src emacs-lisp
(setq org-ellipsis " ▾ "
      org-hide-leading-stars t
      org-priority-highest ?A
      org-priority-lowest ?E
      org-priority-faces
      '((?A . 'all-the-icons-red)
        (?B . 'all-the-icons-orange)
        (?C . 'all-the-icons-yellow)
        (?D . 'all-the-icons-green)
        (?E . 'all-the-icons-blue)))
#+end_src

It's also nice to make use of the =prettify-symbols-mode= for a few Org syntactic
tokens which we'd like to prettify that aren't covered by =org-modern= or any
other settings.

#+begin_src emacs-lisp
(appendq! +ligatures-extra-symbols
          `(:list_property "∷"
            :em_dash       "—"
            :ellipses      "…"
            :arrow_right   "→"
            :arrow_left    "←"
            :arrow_lr      "⟷"
            :properties    "⚙"
            :end           "∎"
            :priority_a   ,(propertize "⚑" 'face 'all-the-icons-red)
            :priority_b   ,(propertize "⬆" 'face 'all-the-icons-orange)
            :priority_c   ,(propertize "■" 'face 'all-the-icons-yellow)
            :priority_d   ,(propertize "⬇" 'face 'all-the-icons-green)
            :priority_e   ,(propertize "❓" 'face 'all-the-icons-blue)))
(set-ligatures! 'org-mode
  :merge t
  :list_property "::"
  :em_dash       "---"
  :ellipsis      "..."
  :arrow_right   "->"
  :arrow_left    "<-"
  :arrow_lr      "<->"
  :properties    ":PROPERTIES:"
  :end           ":END:"
  :priority_a    "[#A]"
  :priority_b    "[#B]"
  :priority_c    "[#C]"
  :priority_d    "[#D]"
  :priority_e    "[#E]")
#+end_src


*** Roam

Basic configuration

#+begin_src emacs-lisp
(setq org-roam-directory (file-truename "~/Documents/org/roam")
      org-roam-complete-everywhere t
      org-roam-capture-templates
      '(("d" "default" plain
         (file "~/Documents/org/roam/templates/default.org")
         :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n#+FILETAGS: \n\n")
         :unnarrowed t)
        ("b" "bibliography" plain
         (file "~/Documents/org/roam/templates/bibliography.org")
         :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n#+FILETAGS: biblio\n\n")
         :unnarrowed t))
      )
#+end_src


#+begin_src emacs-lisp :tangle no
(use-package! org-roam
  :after org
  ;; :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-directory (file-truename "~/Documents/org/roam"))
  (org-roam-complete-everywhere t)
  (org-roam-capture-templates
   '(("d" "default" plain
      (file "~/Documents/org-roam/templates/default.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n#+FILETAGS: \n\n")
      :unnarrowed t)
     ("b" "bibliography" plain
      (file "~/Documents/org-roam/templates/bibliography.org")
      :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n#+DATE: %U\n#+FILETAGS: biblio\n\n")
      :unnarrowed t)))
  :bind (("C-c n g" . org-roam-ui-mode))
  :config
  (org-roam-setup)
  (org-id-update-id-locations))
#+end_src

Nicer file names in window titles:

#+begin_src emacs-lisp
(defadvice! doom-modeline--buffer-file-name-roam-aware-a (orig-fun)
  :around #'doom-modeline-buffer-file-name ; takes no args
  (if (s-contains-p org-roam-directory (or buffer-file-name ""))
      (replace-regexp-in-string
       "\\(?:^\\|.*/\\)\\([0-9]\\{4\\}\\)\\([0-9]\\{2\\}\\)\\([0-9]\\{2\\}\\)[0-9]*-"
       "🢔(\\1-\\2-\\3) "
       (subst-char-in-string ?_ ?  buffer-file-name))
    (funcall orig-fun)))
#+end_src


**** Org Roam UI

Use the latest version of =Org Roam=:

#+begin_src emacs-lisp :tangle packages.el
(unpin! org-roam)
#+end_src

Install =Org Roam UI=

#+begin_src emacs-lisp :tangle packages.el
(package! org-roam-ui)
#+end_src

Install dependencies:

#+begin_src emacs-lisp
(use-package! websocket
  :after org-roam)
#+end_src

Configure package =Org Roam UI=:

#+begin_src emacs-lisp
(use-package! org-roam-ui
  :after org-roam
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t
        org-roam-ui-browser-function #'browse-url-xdg-open))
#+end_src


** LaTeX

Set default PDF reader:

#+begin_src emacs-lisp
(setq +latex-viewers '(zathura))
(with-eval-after-load 'tex
  (add-to-list 'TeX-view-program-selection
               '(output-pdf "Zathura"))
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer))
#+end_src

Use $\LaTeX$ preview pane mode:

#+begin_src emacs-lisp
(require 'latex-preview-pane)
(latex-preview-pane-enable)
;(map!
; :map LaTeX-mode-map
; :localleader
; :desc "View" "v" #'TeX-view)
#+end_src

Use ~TAB~ for ~cdlatex~:

#+begin_src emacs-lisp
(map! :map cdlatex-mode-map
      :i "TAB" #'cdlatex-tab)
#+end_src


** Python

#+begin_src emacs-lisp
;; (add-hook 'python-mode-hook 'lsp)
#+end_src


*** Anaconda

#+begin_src emacs-lisp
(require 'conda)
;; (custom-set-variables
;;  '(conda-anaconda-home "/opt/miniconda3/"))
(setq
 conda-anaconda-home (expand-file-name "/opt/miniconda3/")
 conda-env-home-directory (expand-file-name "~/.conda/")
 conda-env-subdirectory "envs")
;; (add-hook 'conda-postactivate-hook 'python-mode)
#+end_src


** Julia

If using =lsp-julia=:

#+begin_src emacs-lisp
;; Do not use built-in package
(setq lsp-julia-package-dir nil)
;; Select Julia environment
(setq lsp-julia-default-environment "~/.julia/environments/v1.8")
#+end_src

If using =eglot=:

#+begin_src emacs-lisp :tangle no
(setq eglot-connect-timeout 600)
(setq eglot-jl-language-server-project "~/.julia/environments/v1.8")
(after! eglot-jl
  (setq eglot-jl-language-server-project eglot-jl-base))
#+end_src


*** Julia REPL

#+begin_src emacs-lisp
(after! julia-repl
  ;; Use vterm
  (julia-repl-set-terminal-backend 'vterm)
  ;; Open REPL at the right side
  (set-popup-rule! "*julia:\*" :side 'right :size 0.3 :ttl 0 :quit nil :select nil)
  ;; Set environment variables
  (setenv "JULIA_NUM_THREADS" "15"))
#+end_src


*** Julia vterm

#+begin_src emacs-lisp :tangle packages.el
(package! julia-vterm)
#+end_src

Activate =julia-vterm= minor mode in =julia-mode=.

#+begin_src emacs-lisp :tangle no
(add-hook 'julia-mode-hook #'julia-vterm-mode)
#+end_src


*** TODO Julia-snail

# Install =Julia Snail=:

# #+begin_src emacs-lisp :tangle packages.el
# (package! julia-snail)
# #+end_src


# #+begin_src emacs-lisp
# (use-package! julia-snail
#   :ensure t
#   :hook (julia-mode . julia-snail-mode))
# #+end_src


** Haskell

Select =brittany= as formatter:

#+begin_src emacs-lisp
(after! lsp-haskell
  (setq lsp-haskell-formatting-provider "brittany"))
#+end_src


** Ledger mode


#+begin_src emacs-lisp
(after! ledger-mode
  (set-popup-rule! " *Ledger Report*" :size 0.3 :vslot -4 :select t :quit nil :ttl 0 :side 'right))
#+end_src


** Beancount

#+begin_src emacs-lisp
(setq lsp-beancount-langserver-executable "beancount-language-server")
(after! beancount-mode
  (set-popup-rule! "*compilation*" :side 'right :size 0.3 :ttl 0 :quit nil :select nil))
#+end_src


** GNU APL

Use =GNU APL= mode:

#+begin_src emacs-lisp :tangle packages.el
(package! gnu-apl-mode)
#+end_src
