#+title: Emacs config
#+author: evf (eliseuv816@gmail.com)
#+date: 2021-11-17
#+startup: fold

* Initialization

** early-init.el

   Taken from DOOMâ€™s early init
  #+begin_src emacs-lisp :tangle early-init.el

    ;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-
    ;; NOTE: early-init.el is now generated from readme.org.  Please edit that file instead

    ;; Defer garbage collection further back in the startup process
    (setq gc-cons-threshold most-positive-fixnum
	  gc-cons-percentage 0.6)

    ;; In Emacs 27+, package initialization occurs before `user-init-file' is
    ;; loaded, but after `early-init-file'. Doom handles package initialization, so
    ;; we must prevent Emacs from doing it early!
    (setq package-enable-at-startup nil)
    ;; Do not allow loading from the package cache (same reason).
    (setq package-quickstart nil)

    ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
    (push '(menu-bar-lines . 0) default-frame-alist)
    (push '(tool-bar-lines . 0) default-frame-alist)
    (push '(vertical-scroll-bars) default-frame-alist)

    ;; Resizing the Emacs frame can be a terribly expensive part of changing the
    ;; font. By inhibiting this, we easily halve startup times with fonts that are
    ;; larger than the system default.
    (setq frame-inhibit-implied-resize t)

    ;; Disable GUI elements
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (setq inhibit-splash-screen t)
    (setq use-file-dialog nil)

    ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
    ;; compiled ahead-of-time when they are installed and site files are compiled
    ;; when gccemacs is installed.
    (setq comp-deferred-compilation nil)

    ;;; early-init.el ends here

#+end_src

** init.el: startup optimization
   
   Taken from DOOM's init
#+begin_src emacs-lisp :tangle init.el

  ;;; init.el --- Personal configuration file -*- lexical-binding: t; no-byte-compile: t; -*-
  ;; NOTE: init.el is now generated from readme.org.  Please edit that file instead

  ;; `file-name-handler-alist' is consulted on every `require', `load' and various
  ;; path/io functions. You get a minor speed up by nooping this. However, this
  ;; may cause problems on builds of Emacs where its site lisp files aren't
  ;; byte-compiled and we're forced to load the *.el.gz files (e.g. on Alpine)
  (unless (daemonp)
    (defvar doom--initial-file-name-handler-alist file-name-handler-alist)
    (setq file-name-handler-alist nil)
    ;; Restore `file-name-handler-alist' later, because it is needed for handling
    ;; encrypted or compressed files, among other things.
    (defun doom-reset-file-handler-alist-h ()
      ;; Re-add rather than `setq', because changes to `file-name-handler-alist'
      ;; since startup ought to be preserved.
      (dolist (handler file-name-handler-alist)
	(add-to-list 'doom--initial-file-name-handler-alist handler))
      (setq file-name-handler-alist doom--initial-file-name-handler-alist))
    (add-hook 'emacs-startup-hook #'doom-reset-file-handler-alist-h)
    (add-hook 'after-init-hook '(lambda ()
				   ;; restore after startup
				   (setq gc-cons-threshold 16777216
					 gc-cons-percentage 0.1)))
    )
  ;; Ensure Doom is running out of this file's directory
  (setq user-emacs-directory (file-truename (file-name-directory load-file-name)))

#+end_src

** init.el: load modules
   
#+begin_src emacs-lisp :tangle init.el

  ;; (add-to-list 'load-path "~/.emacs.d/lisp/")
  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

  (let ((file-name-handler-alist nil)
	(gc-cons-threshold 100000000))
    (require 'init-core)
    ;; (require 'init-extra)
    )

  ;;; init.el ends here

#+end_src


* Other stuff
  
  #+begin_src emacs-lisp

    ;; Custom variables
    (custom-set-variables
     ;; custom-set-variables was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     '(custom-safe-themes
       '("47db50ff66e35d3a440485357fb6acb767c100e135ccdf459060407f8baea7b2" "0d01e1e300fcafa34ba35d5cf0a21b3b23bc4053d388e352ae6a901994597ab1" default))
     '(package-selected-packages
       '(doom-themes helpful counsel which-key rainbow-delimiters doom-modeline ivy command-log-mode use-package)))
    (custom-set-faces
     ;; custom-set-faces was added by Custom.
     ;; If you edit it by hand, you could mess it up, so be careful.
     ;; Your init file should contain only one such instance.
     ;; If there is more than one, they won't work right.
     )

    ;; Remove bloat ui elements
    (scroll-bar-mode -1) ; Disable visual scrollbar
    (menu-bar-mode -1)   ; Disable menu bar
    (tool-bar-mode -1)   ; Disable the toolbar

    (tooltip-mode -1)    ; Disable the tooltips
    (set-fringe-mode 10) ; Give some brathing room

    ;; Set up visible bell
    (setq visible-bell t)

    ;; Select cursor
    (setq cursor-type 'hollow)

    ;; Select default font
    (set-face-attribute 'default nil :font "Fira Code Retina" :height 100)

    ;; Use ESC to quit prompts
    (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

    ;; Display line numbers
    (column-number-mode)
    (global-display-line-numbers-mode t)
    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
		    shell-mode-hook
		    term-mode-hook
		    eshell-mode-hook))
      (add-hook mode (lambda () (display-line-numbers-mode 0))))

    ;; Use org-mode as initial mode in scratch buffer
    (setq inhibit-startup-message 1
	  initial-scratch-message "#TITLE: "
	  initial-major-mode 'org-mode)

    ;; Define and initialize package repositories
    (require 'package)
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			     ("org" . "https://orgmode.org/elpa/")
			     ("elpa" . "https://elpa.gnu.org/packages/")))
    (package-initialize)
    (unless package-archive-contents
     (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
    (package-install 'use-package))
    (require 'use-package)
    (setq use-package-always-ensure t)

    ;; Counsel
    (use-package counsel
      :bind (("M-x" . counsel-M-x)
	     ("C-x b" . counsel-ibuffer)
	     ("C-x C-f" . counsel-find-file)
	     ("C-h f" . counsel-describe-function)
	     ("C-h v" . counsel-describe-variable)
	     ("C-h o" . counsel-describe-symbol)
	     :map minibuffer-local-map
	     ("C-r" . 'counsel-minibuffer-history)))

    ;; Ivy
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)	
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))

    ;; Ivy rich
    (use-package ivy-rich
      :init (ivy-rich-mode 1))

    ;; DOOM themes
    (use-package doom-themes
      :init (load-theme 'doom-palenight))

    ;; DOOM modeline
    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :custom ((doom-modeline-height 20)))

    ;; Rainbow delimiters
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))

    ;; Which key!?
    (use-package which-key
      :init (which-key-mode)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0.3))

    ;; Helpful
    (use-package helpful
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . helpful-function)
      ([remap describe-symbol] . helpful-symbol)
      ([remap describe-variable] . helpful-variable)
      ([remap describe-command] . helpful-command)
      ([remap describe-key] . helpful-key))

  #+end_src
  
