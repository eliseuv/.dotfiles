#+TITLE: Julia custom sysimages
#+AUTHOR: evf (eliseuv816@gmail.com)

* Revise.jl and the juliarc file

The package ~Revise.jl~ allows us to edit source files mid-session without having to restart the REPL or even reloading the files.

To launch it by default in every REPL session you can add the following lines to your ~juliarc~ files (~~/.julia/config/startup.jl~):

#+BEGIN_SRC julia
atreplinit() do repl
    try
        @eval using Revise
    catch e
        @warn "Error initializing Revise" exception=(e, catch_backtrace())
    end
end
#+END_SRC

You can also load other packages inside this ~atreplinit~ function, particulary those that take a long time to load each time, for example:

#+BEGIN_SRC julia
@eval using Symbolics
#+END_SRC


* Generate list of functions to be compiled

Tell Julia to output all the functions it compiles during this REPL session to a file (~revise-omr_precompile.jl~):

#+BEGIN_SRC bash
julia --trace-compile=revise-omr_precompile.jl
#+END_SRC

Inside this session load the ~OhMyREPL~ package and use some of its functionalities:

#+BEGIN_SRC julia
using OhMyREPL

1+1

for x in 1:10
    println(x)
end

^R
#+END_SRC

You can ~^R~ to ensure the history fuzzy search function gets precompiled.

The ~Revise.jl~ package and any other packages you loaded in your ~juliarc~ will be automatically be included.

Exit Julia.


* Use PackageCompiler.jl to create custom sysimage

Open another Julia session (no flags this time).

Here we tell ~PackageCompiler~ to generate a custom sysimage containing the functions described in the previous file precompiled.

#+BEGIN_SRC julia
using PackageCompiler

PackageCompiler.create_sysimage(["Revise", "OhMyREPL", "Symbolics"]; sysimage_path="revise-omr-sysimage.so",
                                precompile_statements_file="revise-omr_precompile.jl")
#+END_SRC

If you loaded other packages inside your ~juliarc~, you must add it to list (first argument of the ~create_sysimage~ function).

Wait for the compilation to finish and exit Julia.


* Use Julia with your custom sysimage

In order to start Julia with your custom sysimage, use the flag ~julia --sysimage=/path/to/sysimage~.

Alternatively, you can create an alias inside your ~~/.bashrc~ or ~~/.profile~ to call Julia with the sysimage you just created:

#+BEGIN_SRC bash
alias jl='julia --sysimage=/home/USER/.julia/config/revise-omr-sysimage.so'
#+END_SRC

Now you can use ~julia script.jl~ for running your scripts without loading any unecessary packages and use ~jl~ to invoke a much richer REPL.


* Sources

+ [[https://timholy.github.io/Revise.jl/stable/][Home 路 Revise.jl]]
+ [[https://julialang.github.io/PackageCompiler.jl/stable/index.html][Home 路 PackageCompiler]]
+ [[https://kristofferc.github.io/OhMyREPL.jl/latest/][Home 路 OhMyREPL]]
+ [[https://julialang.github.io/PackageCompiler.jl/stable/examples/ohmyrepl.html][Creating a sysimage with OhMyREPL 路 PackageCompiler]]
