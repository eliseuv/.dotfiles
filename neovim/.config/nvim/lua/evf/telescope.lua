-- Telescope
-- https://github.com/nvim-telescope/telescope.nvim

-- Safely initialize Telescope
local status_ok, telescope = pcall(require, "telescope")
if not status_ok then
	return
end

-- https://github.com/nvim-telescope/telescope-frecency.nvim
telescope.load_extension("frecency")
-- https://github.com/nvim-telescope/telescope-media-files.nvim
telescope.load_extension("media_files")

local actions = require "telescope.actions"

telescope.setup {
	defaults = {

		prompt_prefix = " ",
		--selection_caret = " ",
		selection_caret = " ",
		path_display = { "smart" },

		mappings = {
			i = {
				["<C-n>"] = actions.cycle_history_next,
				["<C-p>"] = actions.cycle_history_prev,

				["<C-j>"] = actions.move_selection_next,
				["<C-k>"] = actions.move_selection_previous,

				["<Down>"] = actions.move_selection_next,
				["<Up>"] = actions.move_selection_previous,

				["<C-c>"] = actions.close,

				["<CR>"] = actions.select_default,
				["<C-x>"] = actions.select_horizontal,
				["<C-v>"] = actions.select_vertical,
				["<C-t>"] = actions.select_tab,

				["<C-u>"] = actions.preview_scrolling_up,
				["<C-d>"] = actions.preview_scrolling_down,

				["<PageUp>"] = actions.results_scrolling_up,
				["<PageDown>"] = actions.results_scrolling_down,

				["<Tab>"] = actions.toggle_selection + actions.move_selection_worse,
				["<S-Tab>"] = actions.toggle_selection + actions.move_selection_better,
				["<C-q>"] = actions.send_to_qflist + actions.open_qflist,
				["<M-q>"] = actions.send_selected_to_qflist + actions.open_qflist,
				["<C-l>"] = actions.complete_tag,
				["<C-_>"] = actions.which_key, -- keys from pressing <C-/>
			},

			n = {
				["<esc>"] = actions.close,
				["<CR>"] = actions.select_default,
				["<C-x>"] = actions.select_horizontal,
				["<C-v>"] = actions.select_vertical,
				["<C-t>"] = actions.select_tab,

				["<Tab>"] = actions.toggle_selection + actions.move_selection_worse,
				["<S-Tab>"] = actions.toggle_selection + actions.move_selection_better,
				["<C-q>"] = actions.send_to_qflist + actions.open_qflist,
				["<M-q>"] = actions.send_selected_to_qflist + actions.open_qflist,

				["j"] = actions.move_selection_next,
				["k"] = actions.move_selection_previous,
				["H"] = actions.move_to_top,
				["M"] = actions.move_to_middle,
				["L"] = actions.move_to_bottom,

				["<Down>"] = actions.move_selection_next,
				["<Up>"] = actions.move_selection_previous,
				["gg"] = actions.move_to_top,
				["G"] = actions.move_to_bottom,

				["<C-u>"] = actions.preview_scrolling_up,
				["<C-d>"] = actions.preview_scrolling_down,

				["<PageUp>"] = actions.results_scrolling_up,
				["<PageDown>"] = actions.results_scrolling_down,

				["?"] = actions.which_key,
			},
		},
	},

	pickers = {
		-- Default configuration for builtin pickers goes here:
		-- picker_name = {
		--	 picker_config_key = value,
		--	 ...
		-- }
		-- Now the picker_config_key will be applied every time you call this
		-- builtin picker
        find_files = {
            find_command = { "rg", "--ignore", "--follow", "--hidden", "--files" }
        }
	},

	extensions = {
		-- Your extension configuration goes here:
		-- extension_name = {
		--	 extension_config_key = value,
		-- }
		-- please take a look at the readme of the extension you want to configure
        -- Telescope frequency
        frecency = {
            -- Path to parent directory of custom database location. Defaults to $XDG_DATA_HOME/nvim if unset.
            --db_root = "home/my_username/path/to/db_root",
            -- To see the scores generated by the algorithm in the results, set this to true.
            show_scores = true,
            -- Determines if non-indexed files are included in workspace filter results.
            show_unindexed = true,
            -- Patterns in this table control which files are indexed (and subsequently which you'll see in the finder results).
            ignore_patterns = {"*.git/*", "*/tmp/*"},
            -- Disable devicons (if available)
            disable_devicons = false,
            -- This table contains mappings of workspace_tag -> workspace_directory The key corresponds to the :tag_name used to select the filter in queries. The value corresponds to the top level directory by which results will be filtered.
            workspaces = {
                ["programs"] = "/home/evf/programs",
                ["dotfiles"]    = "/home/evf/.dotfiles",
                ["scripts"] = "/home/evf/.scripts",
                ["data"]    = "/home/evf/.local/share",
                --["wiki"]    = "/home/evf/wiki",
            },
        },
        -- Telescope media Files
		media_files = {
				-- filetypes whitelist
				-- defaults to {"png", "jpg", "mp4", "webm", "pdf"}
				filetypes = {"png", "jpg", "jpeg", "pdf", "webp", "webm", "mp4"},
				find_cmd = "rg" -- find command (defaults to `fd`)
			}
	},
}
