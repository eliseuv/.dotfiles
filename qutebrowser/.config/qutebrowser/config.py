# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# TODO:
# - Yank git clone url keybinding
# - Queue videos on mpv

import subprocess

def read_xresources(prefix):
    props = {}
    x = subprocess.run(['xrdb', '-query'], stdout=subprocess.PIPE)
    lines = x.stdout.decode().split('\n')
    for line in filter(lambda l : l.startswith(prefix), lines):
        prop, _, value = line.partition(':\t')
        props[prop] = value
    return props

xresources = read_xresources('*')
# can be userd now like `c.colors.statusbar.normal.bg = xresources['*.background']`

base00 = xresources['*color0']
base01 = xresources['*color1']
base02 = xresources['*color2']
base03 = xresources['*color3']
base04 = xresources['*color4']
base05 = xresources['*color5']
base06 = xresources['*color6']
base07 = xresources['*color7']
base08 = xresources['*color8']
base09 = xresources['*color9']
base0A = xresources['*color10']
base0B = xresources['*color11']
base0C = xresources['*color12']
base0D = xresources['*color13']
base0E = xresources['*color14']
base0F = xresources['*color15']

# set qutebrowser colors

# # Text color of the completion widget. May be a single color to use for
# # all columns or a list of three colors, one for each column.
# c.colors.completion.fg = base02
# # Background color of the completion widget for odd rows.
# c.colors.completion.odd.bg = base00
# # Background color of the completion widget for even rows.
# c.colors.completion.even.bg = base08
# # Foreground color of completion widget category headers.
# c.colors.completion.category.fg = base06
# # Background color of the completion widget category headers.
# c.colors.completion.category.bg = base00
# # Top border color of the completion widget category headers.
# c.colors.completion.category.border.top = base00
# # Bottom border color of the completion widget category headers.
# c.colors.completion.category.border.bottom = base00
# # Foreground color of the selected completion item.
# c.colors.completion.item.selected.fg = base00
# # Background color of the selected completion item.
# c.colors.completion.item.selected.bg = base0A
# # Top border color of the completion widget category headers.
# c.colors.completion.item.selected.border.top = base0A
# # Bottom border color of the selected completion item.
# c.colors.completion.item.selected.border.bottom = base0A
# # Foreground color of the matched text in the completion.
# c.colors.completion.match.fg = base0B
# # Color of the scrollbar handle in the completion view.
# c.colors.completion.scrollbar.fg = base05
# # Color of the scrollbar in the completion view.
# c.colors.completion.scrollbar.bg = base00
# # Background color for the download bar.
# c.colors.downloads.bar.bg = base00
# # Color gradient start for download text.
# c.colors.downloads.start.fg = base00
# # Color gradient start for download backgrounds.
# c.colors.downloads.start.bg = base0D
# # Color gradient end for download text.
# c.colors.downloads.stop.fg = base00
# # Color gradient stop for download backgrounds.
# c.colors.downloads.stop.bg = base0C
# # Foreground color for downloads with errors.
# c.colors.downloads.error.fg = base08
# # Font color for hints.
# c.colors.hints.fg = base00
# # Background color for hints. Note that you can use a `rgba(...)` value
# # for transparency.
# c.colors.hints.bg = base0A
# # Font color for the matched part of hints.
# c.colors.hints.match.fg = base05
# # Text color for the keyhint widget.
# c.colors.keyhint.fg = base05
# # Highlight color for keys to complete the current keychain.
# c.colors.keyhint.suffix.fg = base05
# # Background color of the keyhint widget.
# c.colors.keyhint.bg = base00
# # Foreground color of an error message.
# c.colors.messages.error.fg = base00
# # Background color of an error message.
# c.colors.messages.error.bg = base08
# # Border color of an error message.
# c.colors.messages.error.border = base08
# # Foreground color of a warning message.
# c.colors.messages.warning.fg = base00
# # Background color of a warning message.
# c.colors.messages.warning.bg = base0E
# # Border color of a warning message.
# c.colors.messages.warning.border = base0E
# # Foreground color of an info message.
# c.colors.messages.info.fg = base05
# # Background color of an info message.
# c.colors.messages.info.bg = base00
# # Border color of an info message.
# c.colors.messages.info.border = base00
# # Foreground color for prompts.
# c.colors.prompts.fg = base05
# # Border used around UI elements in prompts.
# c.colors.prompts.border = base00
# # Background color for prompts.
# c.colors.prompts.bg = base00
# # Background color for the selected item in filename prompts.
# c.colors.prompts.selected.bg = base0A
# # Foreground color of the statusbar.
# c.colors.statusbar.normal.fg = base0B
# # Background color of the statusbar.
# c.colors.statusbar.normal.bg = base00
# # Foreground color of the statusbar in insert mode.
# c.colors.statusbar.insert.fg = base00
# # Background color of the statusbar in insert mode.
# c.colors.statusbar.insert.bg = base0D
# # Foreground color of the statusbar in passthrough mode.
# c.colors.statusbar.passthrough.fg = base00
# # Background color of the statusbar in passthrough mode.
# c.colors.statusbar.passthrough.bg = base0C
# # Foreground color of the statusbar in private browsing mode.
# c.colors.statusbar.private.fg = base00
# # Background color of the statusbar in private browsing mode.
# c.colors.statusbar.private.bg = base03
# # Foreground color of the statusbar in command mode.
# c.colors.statusbar.command.fg = base05
# # Background color of the statusbar in command mode.
# c.colors.statusbar.command.bg = base00
# # Foreground color of the statusbar in private browsing + command mode.
# c.colors.statusbar.command.private.fg = base05
# # Background color of the statusbar in private browsing + command mode.
# c.colors.statusbar.command.private.bg = base00
# # Foreground color of the statusbar in caret mode.
# c.colors.statusbar.caret.fg = base00
# # Background color of the statusbar in caret mode.
# c.colors.statusbar.caret.bg = base0E
# # Foreground color of the statusbar in caret mode with a selection.
# c.colors.statusbar.caret.selection.fg = base00
# # Background color of the statusbar in caret mode with a selection.
# c.colors.statusbar.caret.selection.bg = base0D
# # Background color of the progress bar.
# c.colors.statusbar.progress.bg = base0D
# # Default foreground color of the URL in the statusbar.
# c.colors.statusbar.url.fg = base05
# # Foreground color of the URL in the statusbar on error.
# c.colors.statusbar.url.error.fg = base08
# # Foreground color of the URL in the statusbar for hovered links.
# c.colors.statusbar.url.hover.fg = base05
# # Foreground color of the URL in the statusbar on successful load
# # (http).
# c.colors.statusbar.url.success.http.fg = base0C
# # Foreground color of the URL in the statusbar on successful load
# # (https).
# c.colors.statusbar.url.success.https.fg = base0B
# # Foreground color of the URL in the statusbar when there's a warning.
# c.colors.statusbar.url.warn.fg = base0E
# # Background color of the tab bar.
# c.colors.tabs.bar.bg = base00
# # Color gradient start for the tab indicator.
# c.colors.tabs.indicator.start = base0D
# # Color gradient end for the tab indicator.
# c.colors.tabs.indicator.stop = base0C
# # Color for the tab indicator on errors.
# c.colors.tabs.indicator.error = base08
# # Foreground color of unselected odd tabs.
# c.colors.tabs.odd.fg = base0A
# # Background color of unselected odd tabs.
# c.colors.tabs.odd.bg = base08
# # Foreground color of unselected even tabs.
# c.colors.tabs.even.fg = base0A
# # Background color of unselected even tabs.
# c.colors.tabs.even.bg = base00
# # Foreground color of selected odd tabs.
# c.colors.tabs.selected.odd.fg = base00
# # Background color of selected odd tabs.
# c.colors.tabs.selected.odd.bg = base05
# # Foreground color of selected even tabs.
# c.colors.tabs.selected.even.fg = base00
# # Background color of selected even tabs.
# c.colors.tabs.selected.even.bg = base05
# # Background color for webpages if unset (or empty to use the theme's
# # color).
# c.colors.webpage.bg = base00

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'no-3rdparty', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'no-3rdparty', 'devtools://*')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
#config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0', 'https://accounts.google.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

old_chrome_ua = 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {qt_key}/{qt_version} {upstream_browser_key}/67.0.1 Safari/{webkit_version}'
config.set('content.headers.user_agent', old_chrome_ua, 'steamdb.info')
config.set('content.headers.user_agent', old_chrome_ua, 'www.nginx.com')
config.set('content.headers.user_agent', old_chrome_ua, 'gitlab.com/users/sign_in')

# Load images automatically in web pages.
config.set('content.images', True, 'chrome-devtools://*')
config.set('content.images', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')
config.set('content.javascript.enabled', True, 'devtools://*')
config.set('content.javascript.enabled', True, 'chrome://*/*')
config.set('content.javascript.enabled', True, 'qute://*/*')

# Hide window decaoration
c.window.hide_decoration = True

# Cookies
c.content.cookies.accept = "no-3rdparty"
c.content.cookies.store = True

# Default editor
c.editor.command = ["alacritty",
                    "-e",
                    "lvim",
                    "-f",
                    "{file}",
                    "-c",
                    "normal {line}G{column0}l"]

# Disable video autoplay
c.content.autoplay = False

# Ad-blocking
c.content.blocking.enabled = True
c.content.blocking.method = 'both'
c.content.blocking.adblock.lists = ['https://easylist.to/easylist/easylist.txt',
                                    'https://easylist.to/easylist/easyprivacy.txt']
c.content.blocking.hosts.lists = ['https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts']
c.content.blocking.hosts.block_subdomains = True

# Enable dark mode
c.colors.webpage.preferred_color_scheme = 'dark'
c.colors.webpage.darkmode.enabled = True
c.colors.webpage.darkmode.algorithm = 'lightness-cielab'
c.colors.webpage.darkmode.policy.images = 'never'
c.colors.webpage.darkmode.policy.page = 'smart'

# Config search engines
c.url.auto_search = 'naive'
c.url.searchengines["DEFAULT"] = "https://duckduckgo.com/?q={}"
c.url.searchengines["s"] = "https://searx.be/search?q={}&categories=general&language=en-US"
c.url.searchengines["g"] = "https://www.google.com/search?q={}"
c.url.searchengines["b"] = "https://www.bing.com/search?q={}"
c.url.searchengines["yd"] = "https://yandex.com/search/?text={}"
c.url.searchengines["gm"] = "https://www.google.com/maps/search/{}"
c.url.searchengines["wp"] = "https://www.wikiwand.com/en/{}?fullSearch=true"
c.url.searchengines["sp"] = "https://www.startpage.com/sp/search?query={}"
c.url.searchengines["yt"] = "https://www.youtube.com/results?search_query={}"
c.url.searchengines["tw"] = "https://www.twitch.tv/search?term={}"
c.url.searchengines["gs"] = "https://scholar.google.com/scholar?hl=en&q={}"
c.url.searchengines["gd"] = "https://datasetsearch.research.google.com/search?query={}"
c.url.searchengines["lib"] = "http://libgen.rs/search.php?req={}"
c.url.searchengines["sci"] = "https://sci-hub.se/{}"
c.url.searchengines["gh"] = "https://github.com/search?q={}"
c.url.searchengines["h"] = "https://hoogle.haskell.org/?hoogle={}"
c.url.searchengines["r"] = "https://libreddit.spike.codes/r/popular/search?q={}&sort=relevance&t=all"
c.url.searchengines["t"] = "https://nitter.net/search?q={}"
c.url.searchengines["w"] = "https://en.wikipedia.org/w/index.php?search={}"
c.url.searchengines["mw"] = "https://www.merriam-webster.com/dictionary/{}"
c.url.searchengines["th"] = "https://www.thesaurus.com/browse/{}"
c.url.searchengines["so"] = "https://stackoverflow.com/search?q={},"
c.url.searchengines["arch"] = "https://wiki.archlinux.org/index.php?search={}"
c.url.searchengines["apkg"] = "https://archlinux.org/packages/?sort=&q={}&maintainer=&flagged="
c.url.searchengines["aur"] = "https://aur.archlinux.org/packages?O=0&K={}"
c.url.searchengines["tpb"] = "https://thepiratebay.org/search.php?q={}&all=on&search=Pirate+Search&"
c.url.searchengines["ny"] = "https://nyaa.si/?f=0&c=0_0&q={}"
c.url.searchengines["wa"] = "https://www.wolframalpha.com/input/?i={}"
c.url.searchengines["amz"] = "https://www.amazon.com.br/s?k={}"
c.url.searchengines["hltv"] = "https://www.hltv.org/search?query={}"
c.url.searchengines["keepa"] = "https://keepa.com/#!search/12-{}"
c.url.searchengines["color"] = "https://www.color-hex.com/color/{}"
c.url.searchengines["sc"] = "https://www.shellcheck.net/wiki/SC{}"

# Aliases
c.aliases = {   'w': 'session-save --current --only-active-window',
                'q': 'close',
                'qa': 'quit',
                'wq': 'quit --save',
                'wqa': 'quit --save',
                }

# Read this config.py file
config.bind(',cS', 'config-source')
config.bind(',cE', 'config-edit')

# Dev tools
config.bind('wi', 'devtools bottom')

# Save session
config.bind('<Ctrl+w>', 'session-save --current --only-active-window')
config.bind('<Ctrl+o>', 'set-cmd-text -s :session-load --clear')

# Open in editor
config.bind(',e', 'edit-url')

# Select tabs
config.bind('<Shift+k>', 'tab-prev')
config.bind('<Shift+j>', 'tab-next')

# Move tabs
config.bind('<Ctrl+Shift+k>', 'tab-move -')
config.bind('<Ctrl+Shift+j>', 'tab-move +')

# Hint yank
config.bind(',y', 'hint all yank')

# Yank link org-mode format [[{link}][{title}]]
config.bind('ym', 'yank inline [[{url}][{title}]]')

# Open links on mpv
config.bind(',p', 'hint links spawn --detach mpv {hint-url}')
config.bind(',P', 'spawn --detach umpv {url}')
config.bind(';p', 'hint --rapid links spawn --detach umpv {hint-url}')

# Download video links
config.bind(',dv', 'hint links spawn --verbose --detach yt-dlp \'{hint-url}\'')
config.bind(',dV', 'spawn --verbose --detach yt-dlp \'{url}\'')
config.bind(';dv', 'hint --rapid links spawn --verbose --detach yt-dlp \'{hint-url}\'')

# Download video links
music_output_dir = '~/Storage/SynologyDrive/music/_unsorted/'
config.bind(',dm', 'hint links spawn --verbose --detach yt-dlp -f ba -x --audio-format mp3 -o \'' + music_output_dir + '%(channel)s - %(title)s [%(id)s].%(ext)s\' \'{hint-url}\'')
config.bind(',dM', 'spawn --verbose --detach yt-dlp -f ba -x --audio-format mp3 -o \'' + music_output_dir + '%(channel)s - %(title)s [%(id)s].%(ext)s\' \'{url}\'')
config.bind(';dm', 'hint --rapid links spawn --verbose --detach yt-dlp -f ba -x --audio-format mp3 -o \'' + music_output_dir + '%(channel)s - %(title)s [%(id)s].%(ext)s\' \'{hint-url}\'')

# Open webpage on internet archive
config.bind(',a', 'hint links fill :open -t https://web.archive.org/web/{hint-url}')
config.bind(',A', 'open https://web.archive.org/web/{url}')

# Download image in page
config.bind(',di', 'hint --rapid images download')

# Libreddit selector hints
c.hints.selectors['libreddit-subreddit'] = ['.post_subreddit', '.search_subreddit']
c.hints.selectors['libreddit-post'] = ['.post_title']
c.hints.selectors['libreddit-user'] = ['.post_author', '.comment_author']

# Libreddit navigation 
config.bind(',rp', 'hint libreddit-post tab')
config.bind(',rr', 'hint libreddit-subreddit tab')
config.bind(',ru', 'hint libreddit-user tab')

# 4chan selector hints
c.hints.selectors['4chan-image'] = ['.fileThumb']
c.hints.selectors['4chan-backlink'] = ['.backlink']
c.hints.selectors['4chan-quotelink'] = ['.quotelink']

# 4chan navigation
config.bind(',ci', 'hint --rapid 4chan-image')
config.bind(',cb', 'hint 4chan-backlink')
config.bind(',cq', 'hint 4chan-quotelink')

# Binds for moving through completion items
config.bind('<Ctrl-j>', 'completion-item-focus next', mode='command')
config.bind('<Ctrl-k>', 'completion-item-focus prev', mode='command')

# Bindings for cycling through CSS stylesheets from Solarized Everything CSS:
# https://github.com/alphapapa/solarized-everything-css
# config.bind(',tap', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/apprentice/apprentice-all-sites.css ""')
# config.bind(',tdr', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/darculized/darculized-all-sites.css ""')
# config.bind(',tgr', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/gruvbox/gruvbox-all-sites.css ""')
# config.bind(',tsd', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/solarized-dark/solarized-dark-all-sites.css ""')
# config.bind(',tsl', 'config-cycle content.user_stylesheets ~/.config/qutebrowser/solarized-everything-css/css/solarized-light/solarized-light-all-sites.css ""')
